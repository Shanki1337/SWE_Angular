{"version":3,"sources":["artikelverwaltung/component/suche_artikel_id/such_ergebnis.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUH;;;;;;;;eAQG;YAYH;gBAYI,YACY,eAA+B,EAAU,OAAe;oBAAxD,oBAAe,GAAf,eAAe,CAAgB;oBAAU,YAAO,GAAP,OAAO,CAAQ;oBAJpE,aAAQ,GAAmB,IAAI,CAAC;oBAChC,aAAQ,GAAW,IAAI,CAAC;oBAIpB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;gBAC9C,CAAC;gBAED,wEAAwE;gBACxE,oDAAoD;gBACpD,yDAAyD;gBACzD,0EAA0E;gBAC1E,0DAA0D;gBAC1D,0EAA0E;gBAC1E,kDAAkD;gBAClD,QAAQ;oBACJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;gBACzB,CAAC;gBAED;;;;;;mBAMG;gBACH,0BAA0B;gBAClB,gBAAgB;oBACpB,iEAAiE;oBACjE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,QAAwB;wBAC1D,gBAAgB;wBAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBAErB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;wBACzB,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzD,CAAC,EAAE,IAAI,CAAC,CAAC;gBACb,CAAC;gBAED;;;;;mBAKG;gBACK,aAAa;oBACjB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,GAAoB;wBACnD,gBAAgB;wBAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBAErB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,QAAQ,GAAG,6BAA6B,CAAC;4BAC9C,MAAM,CAAC;wBACX,CAAC;wBAED,EAAE,CAAC,CAAC,iBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChB,IAAI,CAAC,QAAQ,GAAW,GAAG,CAAC;4BAC5B,MAAM,CAAC;wBACX,CAAC;wBAED,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACV,KAAK,GAAG;gCACJ,IAAI,CAAC,QAAQ,GAAG,yBAAyB,CAAC;gCAC1C,KAAK,CAAC;4BACV;gCACI,IAAI,CAAC,QAAQ,GAAG,6BAA6B,CAAC;gCAC9C,KAAK,CAAC;wBACd,CAAC;wBACD,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3D,CAAC,EAAE,IAAI,CAAC,CAAC;gBACb,CAAC;YAEL,CAAC;YA5EG;gBAAC,YAAK,EAAE;;yDAAA;YAlBZ;gBAAC,gBAAS,CAAC;oBACP,QAAQ,EAAE,eAAe;oBACzB,UAAU,EAAE,CAAC,gBAAO,EAAE,2BAAgB,EAAE,qBAAY,CAAC;oBACrD,QAAQ,EAAE;;;;;;KAMT;iBACJ,CAAC;;4BAAA;YACF,kCAmFC,CAAA","file":"artikelverwaltung/component/suche_artikel_id/such_ergebnis.js","sourcesContent":["/*\r\n * Copyright (C) 2015 - 2016 Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport {Component, OnInit, Input} from 'angular2/core';\r\nimport {Router} from 'angular2/router';\r\n\r\nimport GefundeneArtikel from './gefundene_artikel';\r\nimport ArtikelService from '../../service/artikel_service';\r\nimport Artikel from '../../model/artikel';\r\nimport {Waiting, ErrorMessage, isString} from '../../../shared/shared';\r\n\r\n/**\r\n * Komponente f&uuml;r das Tag <code>such-ergebnis</code>, die wiederum aus den\r\n * Kindkomponenten f&uuml;r diese Tags besteht:\r\n * <ul>\r\n *  <li><code>waiting</code>\r\n *  <li><code>gefundene-buecher</code>\r\n *  <li><code>error-message</code>\r\n * </ul>\r\n */\r\n@Component({\r\n    selector: 'such-ergebnis',\r\n    directives: [Waiting, GefundeneArtikel, ErrorMessage],\r\n    template: `\r\n        <section>\r\n            <waiting [activated]=\"waiting\"></waiting>\r\n            <gefundene-artikel [artikel]=\"artikel\"></gefundene-artikel>\r\n            <error-message [text]=\"errorMsg\"></error-message>\r\n        <section>\r\n    `\r\n})\r\nexport default class SuchErgebnis implements OnInit {\r\n    // Im ganzen Beispiel: lokale Speicherung des Zustands und nicht durch z.B.\r\n    // eine Flux-Bibliothek, wie z.B. Redux http://redux.js.org\r\n\r\n    // Property Binding: <such-ergebnis [waiting]=\"...\">\r\n    // Decorator fuer ein Attribut. Hier: siehe InputMetadata in\r\n    // node_modules\\angular2\\ts\\src\\core\\metadata\\directives.ts\r\n    @Input() waiting: boolean;\r\n\r\n    artikelz: Array<Artikel> = null;\r\n    errorMsg: string = null;\r\n\r\n    constructor(\r\n        private _artikelService: ArtikelService, private _router: Router) {\r\n        console.log('SuchErgebnis.constructor()');\r\n    }\r\n\r\n    // Methode zum \"LifeCycle Hook\" OnInit: wird direkt nach dem Konstruktor\r\n    // aufgerufen. Entspricht @PostConstruct bei Java EE\r\n    // node_modules\\angular2\\ts\\src\\core\\linker\\interfaces.ts\r\n    // Weitere Methoden zum Lifecycle: ngAfterViewInit(), ngAfterContentInit()\r\n    // https://angular.io/docs/ts/latest/guide/cheatsheet.html\r\n    // Die Ableitung vom Interface OnInit ist nicht notwendig, aber erleichtet\r\n    // IntelliSense bei der Verwendung von TypeScript.\r\n    ngOnInit(): void {\r\n        this._observeArtikelz();\r\n        this._observeError();\r\n    }\r\n\r\n    /**\r\n     * Methode, um den injizierten <code>BuecherService</code> zu beobachten,\r\n     * ob es gefundene bzw. darzustellende B&uuml;cher gibt, die in der\r\n     * Kindkomponente f&uuml;r das Tag <code>gefundene-buecher</code>\r\n     * dargestellt werden. Diese private Methode wird in der Methode\r\n     * <code>ngOnInit</code> aufgerufen.\r\n     */\r\n    /* tslint:disable:align */\r\n    private _observeArtikelz(): void {\r\n        // Funktion als Funktionsargument, d.h. Code als Daten uebergeben\r\n        this._artikelService.observeArtikelz((artikelz: Array<Artikel>) => {\r\n            // zuruecksetzen\r\n            this.waiting = false;\r\n            this.errorMsg = null;\r\n\r\n            this.artikelz = artikelz;\r\n            console.log('SuchErgebnis.artikelz:', this.artikelz);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Methode, um den injizierten <code>BuecherService</code> zu beobachten,\r\n     * ob es bei der Suche Fehler gibt, die in der Kindkomponente f&uuml;r das\r\n     * Tag <code>error-message</code> dargestellt werden. Diese private Methode\r\n     * wird in der Methode <code>ngOnInit</code> aufgerufen.\r\n     */\r\n    private _observeError(): void {\r\n        this._artikelService.observeError((err: string | number) => {\r\n            // zuruecksetzen\r\n            this.waiting = false;\r\n            this.artikelz = null;\r\n\r\n            if (err === null) {\r\n                this.errorMsg = 'Ein Fehler ist aufgetreten.';\r\n                return;\r\n            }\r\n\r\n            if (isString(err)) {\r\n                this.errorMsg = <string>err;\r\n                return;\r\n            }\r\n\r\n            switch (err) {\r\n                case 404:\r\n                    this.errorMsg = 'Keine Artikel gefunden.';\r\n                    break;\r\n                default:\r\n                    this.errorMsg = 'Ein Fehler ist aufgetreten.';\r\n                    break;\r\n            }\r\n            console.log(`SuchErgebnis.errorMsg: ${this.errorMsg}`);\r\n        }, this);\r\n    }\r\n    /* tslint:enable:align */\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["artikelverwaltung/model/artikel.ts"],"names":[],"mappings":"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","file":"artikelverwaltung/model/artikel.js","sourcesContent":["/*\r\n * Copyright (C) 2015 - 2016 Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// import {RadioButtonState} from 'angular2/common';\r\n\r\n// import {isBlank, isPresent} from '../../shared/shared';\r\n\r\n/* tslint:disable:max-line-length */\r\n// https://github.com/urish/angular2-moment/blob/master/TimeAgoPipe.ts\r\n// https://github.com/felixge/node-dateformat\r\n// Moment exportiert den Namespace moment und die gleichnamige Function:\r\n// http://stackoverflow.com/questions/35254524/using-moment-js-in-angular-2-typescript-application#answer-35255412\r\n/* tslint:enable:max-line-length */\r\n// import {Moment} from 'moment';\r\n// import * as moment_ from 'moment';\r\n// const moment: (date: string) => Moment = (<any>moment_)['default'];\r\n\r\nconst MIN_RATING: number = 0;\r\nconst MAX_RATING: number = 5;\r\n\r\n/**\r\n * Gemeinsame Datenfelder unabh&auml;ngig, ob die Artikeldaten von einem Server\r\n * (z.B. RESTful Web Service) oder von einem Formular kommen.\r\n */\r\nexport interface IArtikelShared {\r\n    _id?: string;\r\n    bezeichnung: string;\r\n    kategorie:\r\n        /* tslint:disable:max-line-length */\r\n        'BAD'|'BUERO'|'DIELE'|'ESSZIMMER'|'KINDERZIMMER'|'KUECHE'|'SCHLAFZIMMER'\r\n        |'WOHNZIMMER';\r\n    ausgesondert?: boolean;\r\n    /* tslint:enable:max-line-length */\r\n}\r\n\r\n/**\r\n * Daten vom und zum REST-Server:\r\n * <ul>\r\n *  <li> Arrays f&uuml;r mehrere Werte, die in einem Formular als Checkbox\r\n *       dargestellt werden.\r\n *  <li> Daten mit Zahlen als Datentyp, die in einem Formular nur als\r\n *       String handhabbar sind.\r\n * </ul>\r\n */\r\nexport interface IArtikelServer extends IArtikelShared {\r\n    preis: number;\r\n    rating?: number;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Daten aus einem Formular:\r\n * <ul>\r\n *  <li> je 1 Control fuer jede Checkbox und\r\n *  <li> au&szlig;erdem Strings f&uuml;r Eingabefelder f&uuml;r Zahlen.\r\n * </ul>\r\n */\r\nexport interface IArtikelForm extends IArtikelShared {\r\n    preis: string;\r\n    rating?: string;\r\n}\r\n\r\n/**\r\n * Model als Plain-Old-JavaScript-Object (POJO) fuer die Daten *UND*\r\n * Functions fuer Abfragen und Aenderungen.\r\n */\r\nexport default class Artikel {\r\n    public ratingArray: Array<boolean> = [];\r\n\r\n    // wird i.a. nicht direkt aufgerufen, sondern Buch.fromServer oder\r\n    // Buch.fromForm\r\n    constructor(\r\n        public _id: string, public bezeichnung: string, public rating: number,\r\n        public kategorie:\r\n            /* tslint:disable:max-line-length */\r\n        'BAD'|'BUERO'|'DIELE'|'ESSZIMMER'|'KINDERZIMMER'|'KUECHE'|\r\n        'SCHLAFZIMMER'|'WOHNZIMMER',\r\n        public preis: number, public ausgesondert: boolean) {\r\n        this._id = _id || null;\r\n        this.bezeichnung = bezeichnung || null;\r\n        this.rating = rating || null;\r\n        this.kategorie = kategorie || null;\r\n        this.preis = preis || null;\r\n        this.ausgesondert = ausgesondert || null;\r\n        for (let i: number = MIN_RATING; i < rating; i++) {\r\n            this.ratingArray.push(true);\r\n        }\r\n        for (let i: number = this.rating; i < MAX_RATING; i++) {\r\n            this.ratingArray.push(false);\r\n        }\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Ein Buch-Objekt mit JSON-Daten erzeugen, die von einem RESTful Web\r\n     * Service kommen.\r\n     * @param artikelS JSON-Objekt mit Daten vom RESTful Web Server\r\n     * @return Das initialisierte Buch-Objekt\r\n     */\r\n    static fromServer(artikelServer: IArtikelServer): Artikel {\r\n        const artikel: Artikel = new Artikel(\r\n            artikelServer._id, artikelServer.bezeichnung, artikelServer.rating,\r\n            artikelServer.kategorie, artikelServer.preis,\r\n            artikelServer.ausgesondert);\r\n        console.log('Artikel.fromServer(): artikel=', artikel);\r\n        return artikel;\r\n    }\r\n\r\n    /**\r\n     * Ein Buch-Objekt mit JSON-Daten erzeugen, die von einem Formular kommen.\r\n     * @param artikelS JSON-Objekt mit Daten vom Formular\r\n     * @return Das initialisierte Buch-Objekt\r\n     */\r\n    static fromForm(artikelForm: IArtikelForm): Artikel {\r\n        // preis und rabatt muss von string in number konvertiert werden\r\n        const artikel: Artikel = new Artikel(\r\n            artikelForm._id, artikelForm.bezeichnung,\r\n            parseInt(artikelForm.rating, 10), artikelForm.kategorie,\r\n            parseInt(artikelForm.preis, 10), artikelForm.ausgesondert);\r\n        console.log('Artikel.fromForm(): artikel=', artikel);\r\n        return artikel;\r\n    }\r\n\r\n    /**\r\n     * Abfrage, ob im Artikeltitel der angegebene Teilstring enthalten ist. Dabei\r\n     * wird nicht auf Gross-/Kleinschreibung geachtet.\r\n     * @param titel Zu &uuml;berpr&uuml;fender Teilstring\r\n     * @return true, falls der Teilstring im Buchtitel enthalten ist. Sonst\r\n     *         false.\r\n     */\r\n    containsBezeichnung(bezeichnung: string): boolean {\r\n        return this.bezeichnung.toLowerCase().includes(\r\n            bezeichnung.toLowerCase());\r\n    }\r\n\r\n    containsId(id: string): boolean {\r\n        return this._id.toLowerCase().includes(id.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Die Bewertung (\"rating\") des Buches um 1 erh&ouml;hen\r\n     */\r\n    rateUp(): void {\r\n        if (this.rating < MAX_RATING) {\r\n            this.rating++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die Bewertung (\"rating\") des Buches um 1 erniedrigen\r\n     */\r\n    rateDown(): void {\r\n        if (this.rating > MIN_RATING) {\r\n            this.rating--;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Abfrage, ob das Buch dem angegebenen Verlag zugeordnet ist.\r\n     * @param verlag der Name des Verlags\r\n     * @return true, falls das Buch dem Verlag zugeordnet ist. Sonst false.\r\n     */\r\n    hasKategorie(kategorie: string): boolean {\r\n        return this.kategorie === kategorie;\r\n    }\r\n\r\n    /**\r\n     * Aktualisierung der Stammdaten des Buch-Objekts.\r\n     * @param titel Der neue Buchtitel\r\n     * @param rating Die neue Bewertung\r\n     * @param art Die neue Buchart (DRUCKAUSGABE oder KINDLE)\r\n     * @param verlag Der neue Verlag\r\n     * @param preis Der neue Preis\r\n     * @param rabatt Der neue Rabatt\r\n     */\r\n    updateStammdaten(\r\n        titel: string, rating: number, kategorie:\r\n                                           /* tslint:disable:max-line-length */\r\n        'BAD'|'BUERO'|'DIELE'|'ESSZIMMER'|'KINDERZIMMER'|'KUECHE'|'SCHLAFZIMMER'\r\n        |'WOHNZIMMER',\r\n        /* tslint:enable:max-line-length */\r\n        preis: number): void {\r\n        this.bezeichnung = titel;\r\n        this.rating = rating;\r\n        this.kategorie = kategorie;\r\n        this.preis = preis;\r\n    }\r\n\r\n    /**\r\n     * Abfrage, ob es zum Buch auch Schlagw&ouml;rter gibt.\r\n     * @return true, falls es mindestens ein Schlagwort gibt. Sonst false.\r\n     */\r\n    // hasSchlagwoerter(): boolean { return this.schlagwoerter.length !== 0; }\r\n\r\n    /**\r\n     * Abfrage, ob es zum Buch das angegebene Schlagwort gibt.\r\n     * @param schlagwort das zu &uuml;berpr&uuml;fende Schlagwort\r\n     * @return true, falls es das Schlagwort gibt. Sonst false.\r\n     */\r\n    /*hasSchlagwort(schlagwort: string): boolean {\r\n        return this.schlagwoerter.find((s: string) => s === schlagwort)\r\n            !== undefined;\r\n    }*/\r\n\r\n    /**\r\n     * Aktualisierung der Schlagw&ouml;rter des Buch-Objekts.\r\n     * @param schnulze ist das Schlagwort SCHNULZE gesetzt\r\n     * @param scienceFiction ist das Schlagwort SCIENCE_FICTION gesetzt\r\n     */\r\n    /*updateSchlagwoerter(schnulze: boolean, scienceFiction: boolean): void {\r\n        this._resetSchlagwoerter();\r\n        if (schnulze) {\r\n            this._addSchlagwort('SCHNULZE');\r\n        }\r\n        if (scienceFiction) {\r\n            this._addSchlagwort('SCIENCE_FICTION');\r\n        }\r\n    }*/\r\n\r\n    /**\r\n     * Konvertierung des Buchobjektes in ein JSON-Objekt f&uuml;r den RESTful\r\n     * Web Service.\r\n     * @return Das JSON-Objekt f&uuml;r den RESTful Web Service\r\n     */\r\n    toJSON(): IArtikelServer {\r\n        return {\r\n            _id: this._id,\r\n            bezeichnung: this.bezeichnung,\r\n            rating: this.rating,\r\n            kategorie: this.kategorie,\r\n            preis: this.preis,\r\n            ausgesondert: this.ausgesondert,\r\n        };\r\n    }\r\n\r\n    toString(): string { return JSON.stringify(this, null, 2); }\r\n\r\n    /*  _resetSchlagwoerter(): void { this.schlagwoerter = []; }\r\n\r\n      _addSchlagwort(schlagwort: string): void {\r\n          if (isBlank(this.schlagwoerter)) {\r\n              this.schlagwoerter = [];\r\n          }\r\n          this.schlagwoerter.push(schlagwort);\r\n      }*/\r\n}\r\n"],"sourceRoot":"/source/"}
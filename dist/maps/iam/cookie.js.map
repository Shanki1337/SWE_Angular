{"version":3,"sources":["iam/cookie.ts"],"names":[],"mappings":"AAAA,0EAA0E;AAC1E,WAAW;;;;;;;;YAEX;;eAEG;YACH;gBACI;;;;;mBAKG;gBACH,OAAc,SAAS,CAAC,IAAY;oBAChC,MAAM,QAAQ,GAAQ,MAAM,CAAC;oBAC7B,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC7B,MAAM,MAAM,GACR,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,GAAG,gBAAgB,EAAE,GAAG,CAAC,CAAC;oBACxE,MAAM,MAAM,GAAoB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC7D,MAAM,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnE,CAAC;gBAED;;;;;;;;;;;mBAWG;gBACH,OAAc,SAAS,CACnB,IAAY,EAAE,KAAa,EAAE,OAAgB,EAAE,IAAa,EAC5D,MAAe;oBACf,IAAI,QAAQ,GAAQ,MAAM,CAAC;oBAC3B,IAAI,SAAS,GACT,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;oBAE1D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,MAAM,WAAW,GACb,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,OAAO,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBACnE,SAAS,IAAI,WAAW,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC;oBACzD,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACP,SAAS,IAAI,QAAQ,IAAI,GAAG,CAAC;oBACjC,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,SAAS,IAAI,UAAU,MAAM,GAAG,CAAC;oBACrC,CAAC;oBAED,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC;gBAChC,CAAC;gBAED;;;;;;;;mBAQG;gBACH,OAAc,YAAY,CAAC,IAAY,EAAE,IAAa,EAAE,MAAe;oBAEnE,uBAAuB;oBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;oBACjD,CAAC;gBACL,CAAC;YACL,CAAC;YAlED,4BAkEC,CAAA","file":"iam/cookie.js","sourcesContent":["// https://github.com/BCJTI/ng2-cookies/blob/master/src/services/cookie.ts\r\n// 8.2.2016\r\n\r\n/**\r\n * Class Cookie - Holds static functions to deal with Cookies\r\n */\r\nexport default class Cookie {\r\n    /**\r\n     * Retrieves a single cookie by it's name\r\n     *\r\n     * @param  {string} name Identification of the Cookie\r\n     * @returns The Cookie's value\r\n     */\r\n    public static getCookie(name: string): string {\r\n        const myWindow: any = window;\r\n        name = myWindow.escape(name);\r\n        const regexp: RegExp =\r\n            new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\r\n        const result: RegExpExecArray = regexp.exec(document.cookie);\r\n        return (result === null) ? null : myWindow.unescape(result[1]);\r\n    }\r\n\r\n    /**\r\n     * Save the Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} value Cookie's value\r\n     * @param  {number} expires Cookie's expiration date in days from now.\r\n     *      If it's undefined the cookie is a session Cookie\r\n     * @param  {string} path Path relative to the domain where the cookie should\r\n     *       be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable.\r\n     *      Default current domain\r\n     */\r\n    public static setCookie(\r\n        name: string, value: string, expires?: number, path?: string,\r\n        domain?: string): void {\r\n        let myWindow: any = window;\r\n        let cookieStr: string =\r\n            `${myWindow.escape(name)}=${myWindow.escape(value)};`;\r\n\r\n        if (expires) {\r\n            const expiresDate: Date =\r\n                new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\r\n            cookieStr += `expires=${expiresDate.toUTCString()};`;\r\n        }\r\n        if (path) {\r\n            cookieStr += `path=${path};`;\r\n        }\r\n        if (domain) {\r\n            cookieStr += `domain=${domain};`;\r\n        }\r\n\r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * Removes specified Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} path Path relative to the domain where the cookie should\r\n     *      be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable.\r\n     *      Default current domain\r\n     */\r\n    public static deleteCookie(name: string, path?: string, domain?: string):\r\n        void {\r\n        // If the cookie exists\r\n        if (Cookie.getCookie(name)) {\r\n            Cookie.setCookie(name, '', -1, path, domain);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}